# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from openerp import api, fields, models

class Trabajadores(models.Model):
    """Registro de Trabajadores"""
    _name = 'trabajadores'
    _rec_name = 'cedula'
    cedula = fields.Char(string="Cédula", size=8, index=True, help="Cédula del Trabajador")
    nombre_completo = fields.Char(string="Nombre Completo", size=80, index=True, help="Nombre Completo del Trabajador")
    dependencia = fields.Char(string="Dependencia", size=100, help="Dependencia del Trabajador")
    cod_nomina = fields.Char(string="Nómina", size=2, help="Código de la Nómina del Trabajador")

    def name_get(self, cr, uid, ids, context={}):

        res = []
        if not ids:
            return res

        for trabajador in self.browse(cr, uid, ids, context=context):
            res.append((trabajador.id, trabajador.cedula + ' - ' + trabajador.nombre_completo))    
     
        return res

class beneficiados(models.Model):
    """Registro de Beneficiados Inces"""
    _name = 'beneficiados'
    _rec_name = 'trabajadores_id'
    trabajadores_id = fields.Many2one('trabajadores', 'Cédula del Trabajador', index=True, help='Cédula del trabajador beneficiado')
    trab_dep = fields.Char(related='trabajadores_id.dependencia', string="Dependencia")
    jornadas_id = fields.Many2one('jornadas', 'Jornada Activa', help='Jornada previamente definida en la configuración')
    articulos_ids = fields.Many2many('articulos', 'articulos_beneficiados_rel', 'beneficiados_id', 'articulos_id','Articulos a Comprar')
    fec_compra = fields.Datetime('Fecha de Compra')

    _sql_constraints = [('beneficiario_unico', 'UNIQUE(trabajadores_id,jornadas_id)', "Este trabajador ya ha sido beneficiado en esta jornada"),]

class jornadas(models.Model):
    """Definición de Jornadas"""
    _name = 'jornadas'
    _rec_name = 'titulo'
    codigo = fields.Char('Código', size=5, help="Código único (max 5 dígitos)")
    titulo = fields.Char('Título', size=100, index=True, help="Título de la Jornada")
    descripcion = fields.Text('Descripción', help="Descripción ampliada de la Jornada")
    lugar = fields.Char('Lugar', size=100, help="Lugar donde se realiza la jornada")
    fecha_inicio = fields.Date('Fecha de Inicio', help="Fecha de inicio de la jornada")
    fecha_culminacion = fields.Date('Fecha de Culminación', help="Fecha de Culminación de la Jornada")
    institucion = fields.Char('Institución', size=50, help="Insitución que ofrece la Jornada")
    articulos_ids = fields.Many2many('articulos', 'jornadas_articulos_rel', 'jornada_id', 'articulo_id', string="Artículos ofrecidos en la jornada", help='Predefinición de artículos que se ofrecerán en la jornada')
    responsable = fields.Char('Responsable de la Jornada', size= 40, help='Nombre completo del responsable de la jornada')
    tel_responsable = fields.Char('Teléfono del responsable', size=11, help='Teléfono del responsable de la jornada')
    active = fields.Boolean('Activa')


class articulos(models.Model):
    """Artículos"""
    _name = 'articulos'
    _rec_name = 'rubro'
    codigo = fields.Char("Código", size=5, help="Código del Artículo (max 5 caracteres)")
    rubro = fields.Char('Rubro', size=60, index=True, help="Rubro del articulo, ej: cafe, celular, camisa")
    marca = fields.Char('Marca', size=60, help="Marca del articulo, ej: Venezuela, Huawei, ovejita")
    caracteristica = fields.Char('Característica', size=200, help="500 gramos premium")
    detalle_ext = fields.Text('Detalle Extendido', help="Descripción completa del artículo, incluyendo su contenido si es un combo")
    #'categoria = fields.selection([('telecomunicaciones',"Telecomunicaciones"),('alimentos',"Alimentos"),('electrodomesticos',"Electrodomésticos"),('medico-asistencial',"Médico-Asistencial")], 'Categoría')
    categoria_id = fields.Many2one ('articulos.categorias', 'Categoria', help="Categoría a la cual pertenece el artículo")
    jornadas_ids = fields.Many2many('jornadas', 'jornadas_articulos_rel', 'articulo_id', 'jornada_id', string="Jornadas", help="Jornadas en las que este artículo ha sido vendido")
    beneficiados_ids = fields.Many2many('beneficiados', 'articulos_beneficiados_rel', 'articulos_id', 'beneficiados_id','Beneficiados')

    def name_get(self, cr, uid, ids, context={}):

        res = []
        if not ids:
            return res

        for articulo in self.browse(cr, uid, ids, context=context):
            res.append((articulo.id, str(articulo.rubro) + ' ' + str(articulo.marca) + ' ' + str(articulo.caracteristica)))    
     
        return res


class articulos_categorias(models.Model):
    "Categorías de Artículos"
    _name = 'articulos.categorias'
    _rec_name = 'nombre'
    codigo = fields.Char("Código", size=5, help="Código de la categoría (max 5 caracteres)")
    nombre = fields.Char('Nombre', size=50, index=True, help="Nombre corto para la categoría")
    descripcion = fields.Text('Descripcion', help="Descripción completa de la categoría")